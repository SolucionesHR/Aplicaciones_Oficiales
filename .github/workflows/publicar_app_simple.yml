name: üì¶ Publicar App Simple con Cat√°logo Visual

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "Nombre de la app"
        required: true
      version:
        description: "Versi√≥n"
        required: true
      file_url:
        description: "URL del release privado (APK, ZIP, etc.)"
        required: true
      platform:
        description: "Plataforma"
        required: true
        default: "Android"
      icon_url:
        description: "URL del √≠cono de la app (opcional)"
        required: false

jobs:
  publicar:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout repo p√∫blico
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}

      - name: üìÅ Preparar carpeta
        run: |
          SAFE_APP=$(echo "${{ github.event.inputs.app_name }}" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          SAFE_PLATFORM=$(echo "${{ github.event.inputs.platform }}" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          mkdir -p "apps/$SAFE_APP/$SAFE_PLATFORM"

     - name: üì• Descargar build privado
       env:
         PRIVATE_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
         FILE_URL: ${{ github.event.inputs.file_url }}
       run: |
         SAFE_APP=$(echo "${{ github.event.inputs.app_name }}" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
         SAFE_PLATFORM=$(echo "${{ github.event.inputs.platform }}" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
         VER="${{ github.event.inputs.version }}"
         cd "apps/$SAFE_APP/$SAFE_PLATFORM"
    
         # Validaci√≥n b√°sica de URL
         if [[ ! "$FILE_URL" =~ ^https://github.com/.*releases/download/.* ]]; then
           echo "‚ùå URL inv√°lida: Debe ser un link directo de GitHub Release (ej: https://github.com/.../releases/download/v1.0.5/app.apk)"
           exit 1
         fi
    
         # Extraer nombre base y extensi√≥n
         FILENAME=$(basename "$FILE_URL")
         EXT="${FILENAME##*.}"
         OUTPUT_FILE="${SAFE_APP}_${SAFE_PLATFORM}_${VER}.${EXT}"
    
         echo "Descargando desde: $FILE_URL"
         echo "Guardando como: $OUTPUT_FILE"
    
         curl -L -v -H "Authorization: token $PRIVATE_TOKEN" \  # -v para logs detallados en debug
           --fail \
           -o "$OUTPUT_FILE" \
           "$FILE_URL"
    
        if [ $? -ne 0 ]; then
          echo "‚ùå Error en descarga (ver logs arriba). Posibles causas:"
          echo "  - URL malformada (chequea tag y asset name)."
          echo "  - Release no existe o asset no subido."
          echo "  - Token sin acceso al repo privado."
          exit 1
        fi
    
        FILE_SIZE=$(stat -c%s "$OUTPUT_FILE")
        if [ "$FILE_SIZE" -eq 0 ]; then
          echo "‚ùå Archivo vac√≠o. Verifica el asset en el release."
          exit 1
        fi
    
        echo "‚úÖ Descargado: $OUTPUT_FILE ($((FILE_SIZE / 1024 / 1024)) MB)"

      - name: üñºÔ∏è Actualizar README.md con tabla y cat√°logo visual
        run: |
          APP="${{ github.event.inputs.app_name }}"
          VER="${{ github.event.inputs.version }}"
          PLATFORM="${{ github.event.inputs.platform }}"
          ICON="${{ github.event.inputs.icon_url || '' }}"
          SAFE_APP=$(echo "$APP" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          SAFE_PLATFORM=$(echo "$PLATFORM" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          FILENAME=$(basename "${{ github.event.inputs.file_url }}")
          EXT="${FILENAME##*.}"
          OUTPUT_FILE="${SAFE_APP}_${SAFE_PLATFORM}_${VER}.${EXT}"
          FILE_PATH="apps/$SAFE_APP/$SAFE_PLATFORM/$OUTPUT_FILE"
          
          # Evitar duplicados: chequea si ya existe secci√≥n para esta app/version
          if ! grep -q "## üì± $APP v$VER" README.md; then
            # Cat√°logo visual
            CATALOG="<div align='center'>"
            if [ -n "$ICON" ]; then
              CATALOG+="<img src='$ICON' width='80' alt='$APP' />"
            fi
            CATALOG+="<h3>$APP v$VER</h3><div style='display:flex;gap:10px;justify-content:center;flex-wrap:wrap;'>"
            CATALOG+="<div style='border:1px solid #ddd;padding:10px;border-radius:8px;text-align:center;width:120px;'>"
            CATALOG+="<p>$PLATFORM</p>"
            CATALOG+="<a href='$FILE_PATH' style='background:#0077ff;color:white;padding:5px 8px;border-radius:6px;text-decoration:none;'>üì• Descargar</a>"
            CATALOG+="</div></div></div>"
            
            # Tabla (opcional, si quieres mantenerla; sino, quita esta parte)
            TABLE="\n## üì± $APP v$VER\n\n| Plataforma | Versi√≥n | Descarga |\n|-----------|---------|-----------|\n| $PLATFORM | $VER | [üì• Descargar]($FILE_PATH) |\n"
            
            # Insertar despu√©s de "## üì± Aplicaciones disponibles" (usa sed para precisi√≥n)
            sed -i "/## üì± Aplicaciones disponibles/a\\$CATALOG$TABLE" README.md
          else
            echo "‚ö†Ô∏è Secci√≥n para $APP v$VER ya existe. Skip update."
          fi
          
          echo "README actualizado con $FILE_PATH"

      - name: üíæ Commit y push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "üì¶ Publicada $APP v$VER para $PLATFORM (con cat√°logo visual)"
            git push
            echo "‚úÖ Commit y push exitosos."
          else
            echo "‚ö†Ô∏è No hay cambios para commit."
          fi
