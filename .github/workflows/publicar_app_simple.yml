name: Download and Copy Release to Public Repo

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL del archivo a descargar'
        required: true
        type: string
      app_name:
        description: 'Nombre de la aplicaci√≥n'
        required: true
        type: string
        default: 'MyApp'
      version:
        description: 'Versi√≥n del archivo (ej: 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      public_repo_url:
        description: 'URL del repositorio p√∫blico (ej: https://github.com/usuario/repo)'
        required: true
        type: string
        default: 'https://github.com/SolucionesHR/Aplicaciones_Oficiales'
      release_notes:
        description: 'Notas del release (opcional)'
        required: false
        type: string
        default: ''

jobs:
  download-and-copy:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          echo "üìã Configuraci√≥n del workflow:"
          echo "URL del archivo: ${{ github.event.inputs.file_url }}"
          echo "App: ${{ github.event.inputs.app_name }}"
          echo "Versi√≥n: ${{ github.event.inputs.version }}"
          echo "Repo p√∫blico: ${{ github.event.inputs.public_repo_url }}"

      - name: Download file
        run: |
          mkdir -p downloads
          cd downloads
          
          FILE_URL="${{ github.event.inputs.file_url }}"
          
          echo "üì• Descargando archivo desde: $FILE_URL"
          
          # Descargar el archivo
          wget --content-disposition "$FILE_URL" -q
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Error descargando el archivo"
            exit 1
          fi
          
          echo "‚úÖ Archivo descargado:"
          ls -lah

      - name: Rename and organize file
        id: organize
        run: |
          cd downloads
          
          APP_NAME="${{ github.event.inputs.app_name }}"
          VERSION="${{ github.event.inputs.version }}"
          
          # Obtener el archivo descargado
          ORIGINAL_FILE=$(ls -1 | head -1)
          
          if [ -z "$ORIGINAL_FILE" ]; then
            echo "‚ùå Error: No se encontr√≥ el archivo descargado"
            exit 1
          fi
          
          echo "üìÑ Archivo original: $ORIGINAL_FILE"
          
          # Extraer la extensi√≥n
          EXTENSION="${ORIGINAL_FILE##*.}"
          
          # Crear nombre del archivo: app_nombre_version.extension
          NEW_FILENAME="${APP_NAME}_${VERSION}.${EXTENSION}"
          
          echo "new_filename=$NEW_FILENAME" >> $GITHUB_OUTPUT
          echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
          
          # Renombrar el archivo
          mv "$ORIGINAL_FILE" "$NEW_FILENAME"
          
          echo "‚úÖ Archivo renombrado a: $NEW_FILENAME"
          ls -lah

      - name: Extract public repo
        id: extract_repo
        run: |
          URL="${{ github.event.inputs.public_repo_url }}"
          # Convertir https://github.com/usuario/repo a usuario/repo
          REPO=$(echo "$URL" | sed 's|.*github.com/||' | sed 's|\.git$||')
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "Repositorio p√∫blico: $REPO"

      - name: Checkout public repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.extract_repo.outputs.repo }}
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          path: public-repo

      - name: Organize files in public repo
        run: |
          cd public-repo
          
          APP_NAME="${{ github.event.inputs.app_name }}"
          NEW_FILENAME="${{ steps.organize.outputs.new_filename }}"
          
          # Crear estructura: app/nombre_app/archivo
          mkdir -p "app/$APP_NAME"
          
          # Copiar el archivo
          cp "../downloads/$NEW_FILENAME" "app/$APP_NAME/$NEW_FILENAME"
          
          echo "üìÅ Estructura creada:"
          tree app/ || find app/ -type f

      - name: Commit and push to public repo
        run: |
          cd public-repo
          
          APP_NAME="${{ github.event.inputs.app_name }}"
          VERSION="${{ github.event.inputs.version }}"
          NEW_FILENAME="${{ steps.organize.outputs.new_filename }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add "app/$APP_NAME/$NEW_FILENAME"
          
          git commit -m "Add $APP_NAME $VERSION release" \
            -m "File: app/$APP_NAME/$NEW_FILENAME" \
            -m "Released by automated workflow"
          
          git push
          
          echo "‚úÖ Archivo publicado en el repositorio p√∫blico"

      - name: Summary
        if: success()
        run: |
          APP_NAME="${{ github.event.inputs.app_name }}"
          VERSION="${{ github.event.inputs.version }}"
          NEW_FILENAME="${{ steps.organize.outputs.new_filename }}"
          PUBLIC_REPO="${{ steps.extract_repo.outputs.repo }}"
          
          echo "## ‚úÖ Operaci√≥n completada exitosamente"
          echo ""
          echo "üì¶ **Aplicaci√≥n**: $APP_NAME"
          echo "üìå **Versi√≥n**: $VERSION"
          echo "üìÑ **Archivo**: $NEW_FILENAME"
          echo "üìç **Ubicaci√≥n**: app/$APP_NAME/$NEW_FILENAME"
          echo "üîó **Repositorio**: $PUBLIC_REPO"
          echo ""
          echo "El archivo ha sido descargado, renombrado y publicado correctamente."
