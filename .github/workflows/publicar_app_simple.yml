name: Copy Release to Public Repo (Manual)

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Nombre de la aplicaci√≥n'
        required: true
        type: string
        default: 'MyApp'
      version:
        description: 'Versi√≥n del release (ej: v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      private_release_url:
        description: 'URL del release privado (ej: https://github.com/usuario/repo/releases/tag/v1.0.0)'
        required: true
        type: string
      public_repo_url:
        description: 'URL del repositorio p√∫blico (ej: https://github.com/usuario/repo)'
        required: true
        type: string
      release_notes:
        description: 'Notas del release (opcional)'
        required: false
        type: string
        default: ''
      platforms:
        description: 'Plataformas a procesar (separadas por coma: android,windows,ios,macos,linux)'
        required: true
        type: string
        default: 'android,windows'

jobs:
  copy-release:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          echo "üìã Configuraci√≥n del workflow:"
          echo "App: ${{ github.event.inputs.app_name }}"
          echo "Versi√≥n: ${{ github.event.inputs.version }}"
          echo "Release privada: ${{ github.event.inputs.private_release_url }}"
          echo "Repo p√∫blico: ${{ github.event.inputs.public_repo_url }}"
          echo "Plataformas: ${{ github.event.inputs.platforms }}"

      - name: Extract private repo and tag from release URL
        id: extract_private_repo
        run: |
          URL="${{ github.event.inputs.private_release_url }}"
          
          # Validar que sea una URL de GitHub
          if [[ ! "$URL" =~ github.com ]]; then
            echo "‚ùå Error: La URL debe ser de GitHub"
            exit 1
          fi
          
          # Extraer usuario/repo de la URL
          # Soporta dos formatos:
          # Ej: https://github.com/usuario/repo/releases/tag/v1.0.0
          # Ej: https://github.com/usuario/repo/releases/download/v1.0.0/archivo
          REPO=$(echo "$URL" | sed 's|.*github.com/||' | sed 's|/releases.*||' | sed 's|\.git$||')
          
          # Extraer el tag de la URL
          # Intenta primero el formato /tag/
          TAG=$(echo "$URL" | grep -oP '(?<=/tag/)[^/]+' || echo "")
          
          # Si no encuentra /tag/, intenta el formato /download/
          if [ -z "$TAG" ]; then
            TAG=$(echo "$URL" | grep -oP '(?<=/download/)[^/]+' || echo "")
          fi
          
          if [ -z "$TAG" ]; then
            echo "‚ùå Error: No se pudo extraer el tag de la URL"
            echo "üìù Formatos soportados:"
            echo "   - https://github.com/usuario/repo/releases/tag/v1.0.0"
            echo "   - https://github.com/usuario/repo/releases/download/v1.0.0/archivo.apk"
            exit 1
          fi
          
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Repositorio privado: $REPO"
          echo "‚úÖ Tag: $TAG"

      - name: Create release assets directory
        run: |
          mkdir -p release-assets
          echo "üìÅ Directorio de assets creado"

      - name: Download release assets from current repo
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        run: |
          # Obtener el ID del release por tag
          RELEASE_ID=$(gh release view "${{ github.event.inputs.version }}" \
            --repo "${{ github.repository }}" \
            --json id -q '.id' 2>/dev/null || echo "")
          
          if [ -z "$RELEASE_ID" ]; then
            echo "‚ö†Ô∏è  Release no encontrado en este repositorio"
            echo "üìÇ Aseg√∫rate de que el tag existe: ${{ github.event.inputs.version }}"
            exit 1
          fi
          
          echo "‚úÖ Release encontrado: $RELEASE_ID"
          
          PRIVATE_REPO="${{ steps.extract_private_repo.outputs.repo }}"
          
          # Descargar los assets del repo privado
          gh release download "${{ github.event.inputs.version }}" \
            --repo "$PRIVATE_REPO" \
            --dir release-assets
          
          echo "üì• Assets descargados:"
          ls -lah release-assets/

      - name: Rename files by platform
        run: |
          cd release-assets
          
          PLATFORMS="${{ github.event.inputs.platforms }}"
          APP_NAME="${{ github.event.inputs.app_name }}"
          
          echo "üîÑ Renombrando archivos..."
          
          # Procesar cada plataforma
          IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
          
          for platform in "${PLATFORM_ARRAY[@]}"; do
            platform=$(echo "$platform" | xargs) # Trim whitespace
            
            case "$platform" in
              android)
                for file in *android* *apk* *aab* 2>/dev/null; do
                  if [ -f "$file" ]; then
                    newname="${file//android/$APP_NAME}"
                    newname="${newname//APK/$APP_NAME}"
                    newname="${newname//AAB/$APP_NAME}"
                    if [ "$file" != "$newname" ]; then
                      mv "$file" "$newname"
                      echo "  ‚úì $file ‚Üí $newname"
                    fi
                  fi
                done
                ;;
              windows)
                for file in *windows* *win* *exe* *msi* 2>/dev/null; do
                  if [ -f "$file" ]; then
                    newname="${file//windows/$APP_NAME}"
                    newname="${newname//win/$APP_NAME}"
                    if [ "$file" != "$newname" ]; then
                      mv "$file" "$newname"
                      echo "  ‚úì $file ‚Üí $newname"
                    fi
                  fi
                done
                ;;
              ios)
                for file in *ios* *ipa* 2>/dev/null; do
                  if [ -f "$file" ]; then
                    newname="${file//ios/$APP_NAME}"
                    newname="${newname//IPA/$APP_NAME}"
                    if [ "$file" != "$newname" ]; then
                      mv "$file" "$newname"
                      echo "  ‚úì $file ‚Üí $newname"
                    fi
                  fi
                done
                ;;
              macos)
                for file in *macos* *mac* *dmg* 2>/dev/null; do
                  if [ -f "$file" ]; then
                    newname="${file//macos/$APP_NAME}"
                    newname="${newname//mac/$APP_NAME}"
                    if [ "$file" != "$newname" ]; then
                      mv "$file" "$newname"
                      echo "  ‚úì $file ‚Üí $newname"
                    fi
                  fi
                done
                ;;
              linux)
                for file in *linux* *deb* *rpm* *appimage* 2>/dev/null; do
                  if [ -f "$file" ]; then
                    newname="${file//linux/$APP_NAME}"
                    newname="${newname//deb/$APP_NAME}"
                    newname="${newname//rpm/$APP_NAME}"
                    if [ "$file" != "$newname" ]; then
                      mv "$file" "$newname"
                      echo "  ‚úì $file ‚Üí $newname"
                    fi
                  fi
                done
                ;;
            esac
          done
          
          echo "üìã Archivos finales:"
          ls -lah

      - name: Extract public repo credentials
        id: extract_repo
        run: |
          URL="${{ github.event.inputs.public_repo_url }}"
          # Convertir https://github.com/usuario/repo a usuario/repo
          REPO=$(echo "$URL" | sed 's|.*github.com/||' | sed 's|\.git$||')
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "Repositorio p√∫blico: $REPO"

      - name: Upload to public repo
        env:
          PRIVATE_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
          PUBLIC_REPO_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        run: |
          if [ -z "$PUBLIC_REPO_TOKEN" ]; then
            echo "‚ùå Error: PUBLIC_REPO_TOKEN no configurado"
            echo "‚ö†Ô∏è  Agrega el secret PUBLIC_REPO_TOKEN a este repositorio"
            exit 1
          fi
          
          if [ -z "$PRIVATE_REPO_TOKEN" ]; then
            echo "‚ö†Ô∏è  PRIVATE_REPO_TOKEN no configurado, usando GITHUB_TOKEN"
            export PRIVATE_REPO_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          fi
          
          # Usar el token privado para descargar
          export GITHUB_TOKEN="$PRIVATE_REPO_TOKEN"
          
          PRIVATE_REPO="${{ steps.extract_private_repo.outputs.repo }}"
          TAG="${{ steps.extract_private_repo.outputs.tag }}"
          PUBLIC_REPO="${{ steps.extract_repo.outputs.repo }}"
          VERSION="${{ github.event.inputs.version }}"
          APP_NAME="${{ github.event.inputs.app_name }}"
          NOTES="${{ github.event.inputs.release_notes }}"
          
          echo "üì§ Subiendo release al repositorio p√∫blico..."
          
          # Verificar si el release ya existe
          RELEASE_EXISTS=$(gh release view "$VERSION" \
            --repo "$PUBLIC_REPO" \
            --json id -q '.id' 2>/dev/null || echo "")
          
          if [ -z "$RELEASE_EXISTS" ]; then
            echo "‚ú® Creando nuevo release..."
            gh release create "$VERSION" \
              release-assets/* \
              --title "$APP_NAME $VERSION" \
              --notes "$NOTES" \
              --repo "$PUBLIC_REPO"
            echo "‚úÖ Release creado exitosamente"
          else
            echo "‚ö†Ô∏è  El release ya existe, eliminando versi√≥n anterior..."
            gh release delete "$VERSION" \
              --repo "$PUBLIC_REPO" \
              --yes
            
            gh release create "$VERSION" \
              release-assets/* \
              --title "$APP_NAME $VERSION" \
              --notes "$NOTES" \
              --repo "$PUBLIC_REPO"
            echo "‚úÖ Release actualizado exitosamente"
          fi

      - name: Summary
        if: success()
        run: |
          echo "## ‚úÖ Operaci√≥n completada"
          echo ""
          echo "üì¶ **Aplicaci√≥n**: ${{ github.event.inputs.app_name }}"
          echo "üìå **Versi√≥n**: ${{ github.event.inputs.version }}"
          echo "üîê **Release Privada**: ${{ github.event.inputs.private_release_url }}"
          echo "üîó **Repositorio P√∫blico**: ${{ github.event.inputs.public_repo_url }}"
          echo "üéØ **Plataformas**: ${{ github.event.inputs.platforms }}"
          echo ""
          echo "Los archivos han sido renombrados y subidos al repositorio p√∫blico."
