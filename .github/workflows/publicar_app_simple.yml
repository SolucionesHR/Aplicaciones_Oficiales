name: Copy Release Asset to Public Repo (Structured Naming)

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL del archivo a descargar'
        required: true
        type: string
      app_name:
        description: 'Nombre de la aplicación'
        required: true
        type: string
        default: 'MyApp'
      version:
        description: 'Versión del archivo (ej: 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      public_repo:
        description: 'Repositorio público de destino (ej: usuario/repo)'
        required: true
        type: string
        default: 'https://github.com/SolucionesHR/Aplicaciones_Oficiales'
      release_notes:
        description: 'Notas del release (opcional)'
        required: false
        type: string
        default: ''

jobs:
  copy-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Validate and parse URL
        id: parse
        run: |
          FILE_URL="${{ github.event.inputs.file_url }}"
          if [[ ! "$FILE_URL" =~ ^https://github\.com/.+/releases/download/.+/.+\.[a-zA-Z0-9]+$ ]]; then
            echo "❌ URL inválida. Ejemplo válido: https://github.com/owner/repo/releases/download/v1.0.0/file.apk"
            exit 1
          fi

          FILENAME=$(basename "$FILE_URL")
          EXT="${FILENAME##*.}"
          echo "original_filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "extension=$EXT" >> $GITHUB_OUTPUT

      - name: Download asset from private repo
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        run: |
          mkdir -p assets
          curl -L \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/octet-stream" \
            "${{ github.event.inputs.file_url }}" \
            --output "assets/downloaded_asset" \
            --fail

          if [ ! -s "assets/downloaded_asset" ]; then
            echo "❌ Falló la descarga o el archivo está vacío"
            exit 1
          fi

      - name: Rename asset with structured path
        id: rename
        run: |
          APP_NAME="${{ github.event.inputs.app_name }}"
          VERSION="${{ github.event.inputs.version }}"
          EXT="${{ steps.parse.outputs.extension }}"

          # Nombre final: app/{app_name}/{app_name}_{version}.{ext}
          FINAL_PATH="app/${APP_NAME}/${APP_NAME}_${VERSION}.${EXT}"

          mv assets/downloaded_asset "assets/$(basename "$FINAL_PATH")"
          echo "final_path=$FINAL_PATH" >> $GITHUB_OUTPUT
          echo "local_file=assets/$(basename "$FINAL_PATH")" >> $GITHUB_OUTPUT

      - name: Create or update release in public repo
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
        with:
          repository: ${{ github.event.inputs.public_repo }}
          tag_name: ${{ github.event.inputs.version }}
          name: "Release ${{ github.event.inputs.version }}"
          body: ${{ github.event.inputs.release_notes || 'Release automática de binarios.' }}
          draft: false
          prerelease: false
          files: ${{ steps.rename.outputs.local_file }}
          # El nombre del asset en la release se define por la ruta en `files`
          # softprops/action-gh-release preserva la estructura de carpetas en el nombre del asset
